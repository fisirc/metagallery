<?xml version="1.0"?>
<svg width="608.58" height="638.82"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:svg="http://www.w3.org/2000/svg">
    <g class="layer" display="inline">
        <title>Layer 1</title>
        <rect fill="#ffffff" height="264.22" id="svg_1" stroke="#c0c0c0" stroke-width="4" transform="matrix(1 0 0 1 0 0)" width="381.78" x="105.05" y="372.55"/>
        <rect fill="#ffffff" height="54.26" id="svg_2" stroke="#c0c0c0" stroke-width="4" transform="matrix(1 0 0 1 0 0)" width="110.38" x="240.15" y="317.91"/>
        <rect fill="#ffffff" height="322.43" id="svg_3" stroke="#c0c0c0" stroke-width="4" transform="matrix(1 0 0 1 0 0)" width="263.53" x="162.47" y="1.28"/>
        <rect fill="#ffffff" height="175.77" id="svg_4" stroke="#c0c0c0" stroke-width="4" transform="matrix(1 0 0 1 0 0)" width="158.76" x="2.72" y="185.36"/>
        <rect fill="#ffffff" height="235.49" id="svg_5" stroke="#c0c0c0" stroke-width="4" width="180.68" x="425.84" y="50.89"/>
        <rect fill="#000000" fill-opacity="0" height="7.62" id="svg_6" stroke="#c0c0c0" width="78.44" x="2.95" y="278.81"/>
        <rect fill="#ffffff" height="231.88" id="svg_7" stroke="#c0c0c0" width="94.59" x="426.97" y="52.57"/>
        <rect fill="#ffffff" height="57.36" id="svg_8" stroke="#c0c0c0" stroke-width="0" transform="matrix(1 0 0 1 0 0)" width="106.25" x="242.28" y="318.33"/>
        <rect fill="#ffffff" height="75.05" id="svg_9" stroke="#000000" stroke-opacity="0" stroke-width="0import useSWR from &#x27;swr&#x27;; import { UserContentFileElement } from &#x27;@/types&#x27;;  type ArgsType&lt;T&gt; = T extends (...args: infer U) =&gt; any ? U : never;  const mockedUserMedia = [     {         id: 1,         type: &#x27;image&#x27;,         title: &#x27;Aiko Tanaka&#x27;,         description: &#x27;Lorem punpuns&#x27;,         url: &#x27;https://www.grupoeducar.cl/wp-content/uploads/2023/06/Arte-Revista-Educar-Julio-2023-edicion-274.png&#x27;,     },     {         id: 2,         type: &#x27;model3d&#x27;,         title: &#x27;Grace en 3d&#x27;,         description: &#x27;Modelo 3d no implementado&#x27;,         url: &#x27;https://diario.global/wp-content/uploads/2022/02/C2015014-TOTS-SOM-EUROPA-UNIDA.jpg&#x27;,     },     {         id: 3,         type: &#x27;image&#x27;,         title: &#x27;Xiao Pang&#x27;,         description: &#x27;Le gusta mirar fijamente a cosas cotidianas&#x27;,         url: &#x27;https://unidadlatina.org/wp-content/uploads/2024/04/arte-contemporaneo-latinoamerica.jpg&#x27;,     },     {         id: 4,         type: &#x27;model3d&#x27;,         title: &#x27;Xiao Pang&#x27;,         description: &#x27;Le gusta mirar fijamente a cosas cotidianas&#x27;,         url: &#x27;http://localhost:5173/assets/3d/chihiro.glb&#x27;,     }, ] satisfies Array&lt;UserContentFileElement&gt;;  export const galleryResponse = {     &quot;origin&quot;: [-7.8, -4.34],     &quot;slots&quot;: [         {             &quot;ref&quot;: &quot;wall1&quot;,             &quot;type&quot;: &quot;2d&quot;,             &quot;props&quot;: {},             &quot;v&quot;: [                 [1.878, 1.752, -3.911],                 [1.878, 0.65, -3.911],                 [2.657, 1.752, -3.911],                 [2.657, 0.65, -3.911],             ]         },         {             &quot;ref&quot;: &quot;wall2&quot;,             &quot;type&quot;: &quot;2d&quot;,             &quot;props&quot;: {},             &quot;v&quot;: [                 [3.216, 1.672, -3.536], // 3                 [3.216, 1.132, -3.536], // 4                 [3.216, 1.672, -2.773], // 2                 [3.216, 1.132, -2.773], // 1             ]         },         {             &quot;ref&quot;: &quot;wall3&quot;,             &quot;type&quot;: &quot;2d&quot;,             &quot;props&quot;: {},             &quot;v&quot;: [                 [3.213, 1.671, -2.281],                 [3.213, 0.855, -2.281],                 [3.213, 1.671, -1.703],                 [3.213, 0.855, -1.703],              ]         },         {             &quot;ref&quot;: &quot;wall4&quot;,             &quot;type&quot;: &quot;2d&quot;,             &quot;props&quot;: {},             &quot;v&quot;: [                 [3.178, 1.746, 2.103],                 [3.178, 0.906, 2.103],                 [3.178, 1.746, 3.289],                 [3.178, 0.906, 3.289],             ]         },         {             &quot;ref&quot;: &quot;wall5&quot;,             &quot;type&quot;: &quot;2d&quot;,             &quot;props&quot;: {},             &quot;v&quot;: [                 [2.78, 2.017, 4.0],                 [2.78, 0.74, 4.0],                 [1.877, 2.017, 4.0],                 [1.877, 0.74, 4.0],             ]         },         {             &quot;ref&quot;: &quot;wall6&quot;,             &quot;type&quot;: &quot;2d&quot;,             &quot;props&quot;: {},             &quot;v&quot;: [                 [0.802, 2.023, 3.988],                 [0.802, 0.793, 3.988],                 [-0.937, 2.023, 3.988],                 [-0.937, 0.793, 3.988],             ]         },         {             &quot;ref&quot;: &quot;wall7&quot;,             &quot;type&quot;: &quot;2d&quot;,             &quot;props&quot;: {},             &quot;v&quot;: [                  [-1.852, 1.735, 3.999],                 [-1.852, 1.207, 3.999],                 [-2.599, 1.735, 3.999],                 [-2.599, 1.207, 3.999],             ]         },         {             &quot;ref&quot;: &quot;wall8&quot;,             &quot;type&quot;: &quot;2d&quot;,             &quot;props&quot;: {},             &quot;v&quot;: [                 [-3.148, 1.842, 3.367],                 [-3.148, 0.612, 3.367],                 [-3.148, 1.842, -0.455],                 [-3.148, 0.612, -0.455],             ]         },         {             &quot;ref&quot;: &quot;wall9&quot;,             &quot;type&quot;: &quot;2d&quot;,             &quot;props&quot;: {},             &quot;v&quot;: [                 [-7.185, 1.316, -3.016],                 [-7.185, 0.619, -3.016],                 [-6.2, 1.316, -3.016],                 [-6.2, 0.619, -3.016],             ]         },         {             &quot;ref&quot;: &quot;wall10&quot;,             &quot;type&quot;: &quot;2d&quot;,             &quot;props&quot;: {},             &quot;v&quot;: [                 [-7.608, 1.585, -3.78],                 [-7.608, 0.33, -3.78],                 [-7.608, 1.585, -4.667],                 [-7.608, 0.33, -4.667],             ]         },         {             &quot;ref&quot;: &quot;wall11&quot;,             &quot;type&quot;: &quot;2d&quot;,             &quot;props&quot;: {},             &quot;v&quot;: [                 [-6.742, 1.405, -5.029],                 [-6.742, 0.553, -5.029],                 [-5.537, 1.405, -5.029],                 [-5.537, 0.553, -5.029],             ]         },         {             &quot;ref&quot;: &quot;wall12&quot;,             &quot;type&quot;: &quot;2d&quot;,             &quot;props&quot;: {},             &quot;v&quot;: [                 [-2.717, 1.807, -3.868],                 [-2.717, 1.11, -3.868],                 [-1.732, 1.807, -3.868],                 [-1.732, 1.11, -3.868],             ]         },         {             &quot;ref&quot;: &quot;big_model&quot;,             &quot;type&quot;: &quot;3d&quot;,             &quot;props&quot;: {                 &quot;scale&quot;: 0.3,                 &quot;rotate&quot;: true,             },             &quot;v&quot;: [                 [-6.234, 0.23441, -1.7944]             ]         },         {             &quot;ref&quot;: &quot;small_model&quot;,             &quot;type&quot;: &quot;3d&quot;,             &quot;props&quot;: {                 &quot;scale&quot;: 1,                 &quot;rotate&quot;: true,             },             &quot;v&quot;: [                 [0, 0, -9.2139]             ]         },     ] } as const;  // const fetcher = (...args: ArgsType&lt;typeof fetch&gt;) =&gt; fetch(...args).then(res =&gt; res.json()); const fetcher = async (...args: ArgsType&lt;typeof fetch&gt;) =&gt; {     const [path] = args;     await new Promise(resolve =&gt; setTimeout(resolve, 200));      if (typeof path !== &#x27;string&#x27;) {         throw new Error(&#x27;Invalid path&#x27;);     }      if (path === &#x27;gallery/media&#x27;) {         return mockedUserMedia;     }     if (path.startsWith(&#x27;gallery/&#x27;)) {         // const gallery = path.split(&#x27;/&#x27;)[1];         return galleryResponse;     }      throw new Error(&#x27;404&#x27;); };  export function useApi&lt;T, E = any&gt;(path: string, options?: RequestInit) {     // @ts-ignore     const { data, error, isLoading, isValidating, mutate } = useSWR&lt;T, E&gt;(         path, (key: string) =&gt; {             return fetcher(key, options);         }, { revalidateOnFocus: false },     );      return {         data,         error,         isLoading,         isValidating,         mutate,     }; }" transform="matrix(1 0 0 1 0 0)" width="86.62" x="135.72" y="242.35"/>
        <rect fill="#000000" fill-opacity="0" height="233.28" id="svg_14" stroke="#c0c0c0" transform="matrix(1 0 0 1 0 0)" width="8.11" x="517.39" y="52.48"/>
    </g>
</svg>
